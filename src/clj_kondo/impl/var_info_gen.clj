(ns clj-kondo.impl.var-info-gen
  "GENERATED, DO NOT EDIT. EXTRACTED FROM EASTWOOD WITH PERMISSION."
  {:no-doc true})
  (in-ns 'clj-kondo.impl.var-info)
  (def predicates '{clojure.core #{decimal? contains? every? satisfies? seq? fn? = vector? thread-bound? < char? some? future-done? pos? sequential? neg? reduced? float? set? <= reversible? bound? map? volatile? var? empty? string? map-entry? > associative? keyword? even? tagged-literal? extends? counted? future? zero? not-every? class? future-cancelled? sorted? nil? instance? record? identical? true? reader-conditional? >= integer? special-symbol? ratio? delay? ifn? chunked-seq? distinct? odd? false? list? == rational? realized? number? not-any? symbol? coll?}, clojure.string #{ends-with? starts-with? includes? blank?}, clojure.set #{superset? subset?}})


  (def clojure-core-syms '#{primitives-classnames +' decimal? prependss restart-agent sort-by is-runtime-annotation? macroexpand ensure imap-cons chunk-first add-annotation load-data-reader-file eduction tree-seq unchecked-remainder-int seq reduce when-first find-ns get-thread-bindings into1 contains? every? proxy-mappings keep-indexed cond->> subs ref-min-history set take-last bit-set reader-conditional gen-class qualified-keyword? while throw-if butlast satisfies? line-seq unchecked-subtract-int take-nth first re-groups seq? dec' ns-unmap println-str with-bindings* inst-ms iterator-seq check-cyclic-dependency iterate slurp newline short-array deref-future fn? doall prefers enumeration-seq dedupe pr-on dissoc atom import bit-shift-right print-method peek aget pvalues bound-fn mk-bound-fn vswap! last pr namespace push-thread-bindings bases = read+string dosync remove-ns take vector? thread-bound? send-via boolean bit-shift-left any? find-var rand-int aclone PrintWriter-on vreset! chunk dec future-call resultset-seq struct data-reader-var map juxt setup-reference ns-publics < *source-path* with-loading-context test rest ex-data emit-deftype* compile isa? boolean? .. munge delay protected-final-methods set-error-mode! re-seq char? make-hierarchy set-agent-send-executor! swap-vals! keep char mapcat unchecked-long emit-extend-type aset-long some? unchecked-negate get-super-and-interfaces remove-tap parse-opts gen-interface *command-line-args* reverse inst? range sort generate-class -cache-protocol-fn unchecked-inc-int map-indexed with-bindings rand-nth comp await spit future-done? *read-eval* dorun implements? simple-symbol? assert-valid-fdecl disj *2 eval cons refer print-dup -reset-methods floats pos? fnil merge-with nthrest load if-not *verbose-defrecords* sequential? *print-level* shuffle boolean-array find build-positional-factory alength bit-xor deliver doseq unsigned-bit-shift-right neg? expand-method-impl-cache load-one load-data-readers var-set unchecked-float pmap error-mode num reduced? disj! float? aset-float deftype bean booleans normalize-slurp-opts ns-unalias when-let int-array set? inc' process-annotation cat StackTraceElement->vec flush take-while vary-meta <= alter -' if-some conj! repeatedly zipmap reset-vals! alter-var-root biginteger descriptor remove * re-pattern min pop! chunk-append nary-inline prn-str with-precision super-chain format reversible? shutdown-agents conj bound? transduce lazy-seq *print-length* *file* compare-and-set! *use-context-classloader* await1 let parse-opts+specs ref-set pop-thread-bindings interleave print-map printf map? -> defstruct protocol? *err* assert-same-protocol get doto identity into areduce long double volatile? definline nfirst meta find-protocol-impl emit-extend-protocol bit-and-not *default-data-reader-fn* var? method-sig unchecked-add-int unquote-splicing emit-method-builder hash-ordered-coll deref-as-map future reset-meta! cycle fn seque serialized-require empty? short definterface pref add-tap filterv hash quot ns-aliases read unchecked-double key longs not= string? uri? emit-defrecord aset-double overload-name unchecked-multiply-int shift-mask chunk-rest pcalls *allow-unresolved-vars* remove-all-methods ns-resolve most-specific as-> aset-boolean trampoline double? fits-table? when-not *1 vec *print-meta* when int print-meta map-entry? ns-refers rand second vector-of hash-combine > replace int? associative? unchecked-int set-error-handler! inst-ms* keyword? :source force bound-fn* namespace-munge group-by prn extend >0? unchecked-multiply print-tagged-object some->> default-data-readers ->VecSeq even? unchecked-dec tagged-literal? double-array in-ns create-ns re-matcher defn ref bigint extends? spread promise aset-char rseq ex-cause load-all construct-proxy agent-errors *compile-files* ex-message *math-context* float pr-str concat aset-short set-agent-send-off-executor! ns mk-am valid-java-method-name symbol to-array-2d mod amap pop use print-object unquote declare dissoc! reductions aset-byte indexed? ref-history-count - assoc! hash-set reduce-kv or cast reset! name ffirst emit-protocol sorted-set emit-hinted-impl strip-ns counted? byte-array tagged-literal println assert-args extend-type macroexpand-1 assoc-in char-name-string bit-test defmethod requiring-resolve EMPTY-NODE time memoize alter-meta! future? add-annotations zero? simple-keyword? require unchecked-dec-int persistent! nnext add-watch not-every? class? rem agent-error some future-cancelled? memfn neg-int? struct-map drop parse-impls *data-readers* load-libs nth sorted? nil? extend-protocol split-at *e validate-generate-class-options load-reader random-sample cond-> dotimes select-keys bit-and bounded-count update group-by-sig list* reify update-in prefer-method aset-int *clojure-version* ensure-reduced *' instance? with-open mix-collection-hash re-find run! val defonce unchecked-add print-sequential loaded-libs ->Vec bytes? filter-methods not with-meta unreduced the-ns record? type identical? unchecked-divide-int ns-name is-annotation? max-key *unchecked-math* defn- *out* file-seq agent ns-map set-validator! ident? maybe-destructured maybe-min-hash defprotocol the-class swap! vals unchecked-subtract tap> *warn-on-reflection* sorted-set-by sync qualified-ident? assert *compile-path* true? array release-pending-sends print empty remove-method *in* load-lib print-ctor letfn volatile! / read-line binding-conveyor-fn reader-conditional? bit-or clear-agent-errors vector proxy-super >= drop-last lift-ns not-empty root-directory distinct partition data-reader-urls loop ams-check add-classpath bit-flip long-array filter-key descendants find-field merge accessor integer? mapv partition-all partition-by numerator object-array with-out-str condp derive load-string special-symbol? elide-top-frames prep-hashes ancestors subseq error-handler gensym cond check-valid-options ratio? delay? intern print-simple flatten doubles halt-when with-in-str remove-watch ex-info ifn? some-> nat-int? asm-type proxy-name ns-interns all-ns find-protocol-method subvec for binding partial chunked-seq? find-keyword replicate min-key reduced char-escape-string re-matches array-map unchecked-byte reduce1 with-local-vars ns-imports send-off defmacro every-pred keys rationalize load-file distinct? libspec? pos-int? prep-ints extenders unchecked-short methods odd? ->ArrayChunk float-array print-throwable *3 validate-fields alias frequencies read-string proxy rsubseq inc get-method with-redefs uuid? bit-clear filter locking list + def-aset split-with aset ->VecNode keyword *ns* destructure *assert* defmulti ctor-sigs chars str next hash-map if-let underive ref-max-history Throwable->map false? *print-readably* ints class some-fn case *flush-on-newline* to-array bigdec list? simple-ident? non-private-methods bit-not io! generate-interface xml-seq case-map byte max == *agent* lazy-cat comment parents count root-resource supers generate-proxy *fn-loader* sorted-map-by apply add-doc-and-meta interpose deref emit-impl assoc rational? transient clojure-version merge-hash-collisions chunk-cons comparator print-prefix-map sorted-map send drop-while proxy-call-with-super realized? char-array resolve compare complement *compiler-options* *print-dup* defrecord with-redefs-fn sequence constantly get-proxy-class when-class make-array shorts completing update-proxy unchecked-negate-int hash-unordered-coll repeat unchecked-inc nthnext and create-struct preserving-reduced get-validator number? await-for chunk-next print-str not-any? into-array qualified-symbol? init-proxy chunk-buffer seqable? symbol? when-some unchecked-char >1? ->> future-cancel var-get commute coll? get-in fnext denominator bytes gen-and-load-class refer-clojure escape-class-name})


  (def cljs-core-syms '#{js->clj unsafe-bit-and sort-by macroexpand chunk-first print-meta? m3-hash-int pr-str* eduction tree-seq unchecked-remainder-int uuid seq reduce when-first find-ns contains? every? keep-indexed cond->> subs set compare-indexed take-last bit-set import-macros qualified-keyword? while tree-map-add -with-meta reset-cache butlast satisfies? protocol-prefix tail-off unchecked-subtract-int -iterator take-nth first native-satisfies? seq? -sorted-seq-from ns-unmap println-str inst-ms linear-traversal-nth bool-expr iterate checked-aget' -empty newline -chunked-rest write-all adapt-ifn-params fn? -prefer-method -assoc doall keyword-identical? pv-aset prefers -js->clj dedupe unchecked-editable-array-for dissoc atom import bit-shift-right -first peek iter-reduce aget -write iter mk-bound-fn specify vswap! last -default-dispatch-val pr tree-map-seq-push namespace obj-map type-hint-sigs -conj = push-tail take vector? array-index-of-equiv? caching-hash bitmap-indexed-node-index boolean bit-shift-left random-uuid any? coercive-not rand-int aclone vreset! chunk elide-implicit-macro-args resolve-var dec unchecked-get return-first map juxt ns-publics < variadic-fn? inode-kv-reduce obj-map->hash-map test rest ex-data this-as -drop-first isa? boolean? .. -clone munge delay re-seq char? make-hierarchy tv-push-tail -reduce -count swap-vals! keep char mapcat unchecked-long some? unchecked-negate remove-tap symbol-identical? simple-benchmark reverse inst? range bit-count prepare-protocol-masks create-node sort unchecked-inc-int -compare map-indexed unchecked-set array-list js-str rand-nth comp array-chunk dispatch-fn bit-shift-right-zero-fill js-reserved? -as-transient dorun implements? pr-sequential-writer simple-symbol? assert-valid-fdecl accumulating-seq-count disj eval pv-clone-node const? cons goog-define ns-lookup floats pos? specify! fnil merge-with nthrest -find if-not sequential? tree-map-replace checked-aset' m3-mix-H1 re-seq* prim-seq shuffle hash-keyword find build-positional-factory alength bit-xor doseq unsigned-bit-shift-right neg? adapt-ifn-invoke-params -remove-method js-invoke m3-mix-K1 unchecked-float undefined? reduced? disj! -lookup float? deftype booleans mask build-map-factory when-let int-array find-and-cache-best-method set? iterable? cat divide -pr-writer flush coercive-boolean set-from-indexed-seq maybe-init-tapset take-while vary-meta is_proto_ pv-reduce <= if-some conj! -pop array-index-of-identical? repeatedly zipmap reset-vals! -remove-watch remove * re-pattern min array-index-of-nil? -persistent! -nth pop! chunk-append prn-str reversible? -realized? -add-watch adapt-proto-params -deref-with-timeout conj -sorted-seq flatten1 transduce lazy-seq -swap! js-delete truth_ array-index-of annotate-specs defcurried key->js new-path compare-and-set! array-seq array-copy-downward pack-array-node js-debugger let interleave print-map map? -> coercive-not= get doto identity into areduce long double volatile? -key nfirst meta tv-editable-tail -kv-reduce emit-extend-protocol bit-and-not var? -comparator unchecked-add-int hash-ordered-coll extend-object! do-assoc reset-meta! do-rfn tree-map-kv-reduce cycle fn -deref pr-writer-ex-info empty? short -clj->js -chunked-first add-tap filterv tv-editable-root hash quot ns-interns* js-this unchecked-double ranged-iterator key longs not= set-print-err-fn! string? uri? emit-defrecord string-expr es6-iterator munge-str pr-str-with-opts validate-impl-sigs js-arguments unchecked-multiply-int chunk-rest remove-all-methods as-> trampoline double? pr-opts when-not vec -notify-watches when int multi-arity-fn map-entry? rand second find-ns-obj hash-combine > -name replace int? associative? unchecked-int js-keys inst-ms* keyword? array-iter :source force group-by ->impl-map -rseq js-obj* prn tv-pop-tail default-dispatch-val use-macros unchecked-multiply gen-apply-to some->> even? es6-iterator-seq unchecked-dec hash-collision-node-find-index persistent-array-map-seq tagged-literal? double-array create-ns defn seq-reduce spread balance-left rseq ex-cause array-map-index-of ex-message string-print float pr-str first-array-for-longvec es6-set-entries-iterator concat -methods js-in ns symbol es6-iterable to-array-2d ExceptionInfo mod amap pop type-hint-impl-map use -entry-key declare pop-tail dissoc! reductions indexed? - -equiv assoc! hash-set reduce-kv or reset! name unchecked-array-for ffirst sorted-set pr-with-opts strip-ns array-reduce counted? tagged-literal println extend-type macroexpand-1 assoc-in bit-test defmethod array-extend-kv time type-hint-single-arity-sig memoize alter-meta! zero? tv-ensure-editable simple-keyword? -indexOf require -assoc-n unchecked-dec-int hash-imap dominates persistent! set-print-fn! nnext balance-right throw-no-method-error demunge-str add-watch not-every? rem ifind? pr-sb-with-opts proto-assign-impls some memfn neg-int? drop parse-impls js-obj nth sorted? nil? type-hint-first-arg extend-protocol split-at array-map-extend-kv prn-str-with-opts random-sample cond-> dotimes select-keys bit-and bounded-count update find-macros-ns list* array-index-of-keyword? reify update-in prefer-method do-curried hash-symbol ensure-reduced edit-and-set instance? mix-collection-hash load-file* re-find run! val defonce unchecked-add transformer-iterator not -vreset! fn->comparator with-meta unreduced rfn record? type identical? collect-protocols -namespace unchecked-divide-int ns-name typed-expr? swap-global-hierarchy! max-key defn- hash-string type-hint-multi-arity-sig -prefers set-validator! ident? maybe-destructured -meta -dispatch-fn defprotocol -add-method ns-special-form balance-left-del swap! vals -chunked-next unchecked-subtract tap> remove-pair variadic-fn sorted-set-by cloneable? gen-apply-to-helper qualified-ident? hash-string* key-test ifn-invoke-methods assert -reset true? find-ns-obj* array -peek empty remove-method multi-arity-fn? balance-right-del letfn volatile! / bitpos bit-or m3-fmix vector hash-coll clone-and-set array->transient-hash-map adapt-obj-params >= drop-last object? lift-ns tree-map-append not-empty distinct partition compatible? fix loop add-obj-methods bit-flip long-array descendants imul array-for merge js-mod to-property integer? mapv infinite? partition-all partition-by variadic-fn* equiv-map object-array with-out-str condp derive seq-iter special-symbol? compare-keywords ancestors subseq gensym -next cond check-valid-options delay? create-inode-seq flatten -dissoc doubles add-proto-methods* halt-when -contains-key? remove-watch ex-info ifn? some-> nat-int? ns-interns pv-fresh-node subvec -pop! base-assign-impls for binding partial chunked-seq? replicate min-key hash-iset reduced re-matches pr-writer-impl array-map unchecked-byte checked-aset ns-imports defmacro every-pred keys missing-protocol load-file distinct? pos-int? unchecked-short apply-to-simple methods odd? ci-reduce validate-fields -get-method frequencies reduceable? rsubseq inc type->str obj-clone get-method with-redefs uuid? vector-index-out-of-bounds es6-entries-iterator bit-clear filter locking create-array-node-seq -assoc-n! next* list + split-with aset int-rotate-left keyword destructure create-tree-map-seq defmulti chars str next pr-seq-writer coercive-= regexp? hash-map *exec-tap-fn* gen-apply-to-simple if-let underive array-copy obj-map-compare-keys add-ifn-methods -reset! -rest nil-iter pr-writer false? ints some-fn case demunge-pattern maybe-enable-print! to-array build-subvec maybe-warn list? tree-map-remove array? prefers* simple-ident? exists? clone scan-array demunge bit-not quote-string byte max == lazy-cat comment parents warn-and-update-protocol count -disjoin! array-index-of-symbol? sorted-map-by apply get-global-hierarchy add-to-string-hash-cache clj->js copy-arguments when-assert unsafe-cast interpose deref pv-aget assoc transient -disjoin chunk-cons comparator print-prefix-map type-hint-multi-arity-sigs sorted-map drop-while realized? resolve compare complement -assoc! defrecord string-iter -key->js sequence constantly chunked-seq make-array checked-aget shorts enable-console-print! -flush -lastIndexOf completing unchecked-negate-int equiv-sequential hash-unordered-coll simple-test-expr? repeat unchecked-inc nthnext and preserving-reduced get-validator number? -conj! gen-apply-to-simple-helper assoc-test chunk-next print-str not-any? into-array -hash qualified-symbol? -dissoc! js-comment chunk-buffer seqable? validate-impls symbol? m3-hash-unencoded-chars when-some unchecked-char require-macros system-time ->> chunkIteratorSeq -invoke js-inline-comment coll? get-in fnext dt->et -val bytes refer-clojure compare-symbols -seq})
  